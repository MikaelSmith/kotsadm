if (document.readyState !== "loading") {
  ready();
} else {
  document.addEventListener('DOMContentLoaded', ready);
}

function ready() {
  var skip = document.getElementById("skip-button");
  if (skip) {
    skip.addEventListener("click", skipAndWait);
  }
}

// Handle tab switching on tls upload

function setActiveTab(id) {
  hideError()
  // remove current active state
  var currentSelectedTab = document.getElementsByClassName("tls-tab-is-active")[0];
  if (currentSelectedTab) {
    currentSelectedTab.classList.remove("tls-tab-is-active");
  }
  // set new active state
  var tabElm = document.getElementById(id);
  if (tabElm) {
    tabElm.classList.add("tls-tab-is-active");
  }

  // Set tab content
  var tabContentWrapper = document.getElementById("upload-type-content-wrapper");
  var submitButton = document.getElementById("formSubmitButton");
  switch (id) {
    case "certsOnServer":
        tabContentWrapper.innerHTML = `
          <div class="flex upload-form-on-server">
            <div class="u-position--relative flex-column flex-auto u-marginRight--30">
              <div>
                <p class="tls-section-header2">Path on server to Key</p>
                <p class="tls-section-sub-sub">Full path to the key on your server.</p>
                <input id="keyOnServer" class="form-input larger" type="text" name="keyOnServer" placeholder="/path/to/key"
                  style="width: 250px;" />
              </div>
            </div>
            <div class="u-position--relative flex-column flex-auto">
              <div>
                <p class="tls-section-header2">Path on server to Certificate</p>
                <p class="tls-section-sub-sub">Full path to the certificate on your server.</p>
                <input id="certificateOnServer" class="form-input larger" type="text" name="certificateOnServer" placeholder="/path/to/certificate"
                  style="width: 250px;" />
              </div>
            </div>
          </div>
        `;
        submitButton.innerHTML = "Save &amp; continue";
        submitButton.onclick = savePathsOnServer;
      break;

    case "generateCertsLetsEncrypt":
      tabContentWrapper.innerHTML = `
       <div class="flex upload-form-lets-encrypt">
          <div class="u-position--relative flex-column flex-auto u-marginRight--30">
            <div>
              <p class="tls-section-header2">Email address</p>
              <p class="tls-section-sub-sub">LetsEncrypt requires an email address to generate a key and certificate.</p>
              <div class="flex">
                <input id="letsEncryptEmail" class="form-input larger" type="text" name="letsEncryptEmail" placeholder="you@example.com"
                  style="width: 250px;" />
                  <span class="lets-encrypt-logo"></span>
                  <a href="https://letsencrypt.org/" target="_blank" rel="noopener noreferrer" style="margin-top: 13px; margin-left: 8px; font-size: 12px;" class="replicated-link">Learn more</a>
              </div>
            </div>
          </div>
        </div>
      `;
      submitButton.innerHTML = "Generate key &amp; cert";
      submitButton.onclick = generateWithLetsEncrypt;
      break;

    case "uploadCerts":
      tabContentWrapper.innerHTML = `
        <div class="flex upload-form">
          <div class="u-position--relative flex-column flex-auto upload">
            <div>
              <label class="tls-section-header2">Upload private key</label>
              <input type="file" name="key" id="key" class="inputkey" />
              <label for="key" class="btn secondary u-marginTop--8">Choose private key</label>
            </div>
          </div>
          <div class="u-position--relative flex-column flex-auto u-marginRight--15 upload">
            <div>
              <label class="tls-section-header2">Upload SSL certificate</label>
              <input type="file" name="cert" id="cert" class="inputcert" />
              <label for="cert" class="btn secondary u-marginTop--8">Choose SSL certificate</label>
            </div>
          </div>
        </div>
      `;
      submitButton.innerHTML = "Upload &amp; continue";
      submitButton.onclick = uploadAndWait;
      break;
    default:
      tabContentWrapper.innerHTML = `No tab selected`;
      break;
  }
}

// Submit function when key/cert are generated by LetsEncrypt
function generateWithLetsEncrypt(e) {
  console.log("generate key/cert on lets encrypt", e);
}

// Submit function when key/cert are on server
function savePathsOnServer(e) {
  console.log("save paths on server and continue", e);
}

// Submit function when key/cert are uploaded
function uploadAndWait(e) {
  e.preventDefault();

  var formData = new FormData();

  var certInput = document.getElementById("cert");
  var keyInput = document.getElementById("key");
  var hostnameInput = document.getElementById("hostname").value;

  formData.append("cert", certInput.files[0]);
  formData.append("key", keyInput.files[0]);
  formData.append("hostname", hostnameInput);

  var xhr = new XMLHttpRequest();


  xhr.onerror = function() {
    showError();
    enableForm();
  }

  xhr.onloadend = function() {
    if (xhr.status === 200) {
      redirectAfterRestart(hostnameInput.value, 10);
      return;
    }

    showError();
    enableForm();
  }

  xhr.open("POST", "/tls");
  xhr.send(formData);
  hideError();
  disableForm();
}

function skipAndWait(e) {
  e.stopPropagation();
  e.preventDefault();

  var hostnameInput = document.getElementById("hostname").value;

  var formData = new FormData();
  formData.append("hostname", hostnameInput)

  var xhr = new XMLHttpRequest();

  xhr.onloadend = function() {
    if (xhr.status === 200) {
      redirectAfterRestart(hostnameInput.value, 10);
      return;
    }
    console.log("POST /tls/skip returned status code ", xhr.status);
  };

  xhr.open("POST", "/tls/skip");
  xhr.send(formData);
  hideError();
  disableForm();
}

function redirectAfterRestart(hostname, n) {
  var url = window.location.origin;

  if (hostname) {
    url = "https://" + hostname + ":" + window.location.port;
  }

  // Errors are expected because the server is restarting, but the errors could also be due to the
  // user uploading a certificate that the browser does not trust. It's not possible to detect the
  // cause of the error, so proceed with redirect after some time
  if (n === 0) {
    window.location = url;
    return;
  }

  setTimeout(function() {
    var xhr = new XMLHttpRequest();

    xhr.open("GET", "/tls/meta");
    xhr.send();

    xhr.onloadend = function() {
      if (xhr.status !== 200) {
        redirectAfterRestart(hostname, n-1);
        return;
      }

      var resp = JSON.parse(xhr.response);

      if (resp.acceptAnonymousUploads) {
        redirectAfterRestart(hostname, n-1);
        return;
      }

      window.location = url;
    };
  }, 400);
}

function hideError() {
  document.getElementById("error").style.display = 'none';
}

function showError() {
  document.getElementById("error").style.display = '';
}

function disableForm() {
  document.querySelectorAll("#upload-form input,#upload-form button").forEach(function(el) {
    el.disabled = true;
  });
}

function enableForm() {
  document.querySelectorAll("#upload-form input,#upload-form button").forEach(function(el) {
    el.disabled = false;
  });
}
